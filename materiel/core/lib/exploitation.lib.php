<?php
require_once DOL_DOCUMENT_ROOT.'/custom/materiel/core/lib/entretien.lib.php';

function strToArray($str) // Converti les listes d'id de la bdd en array (["1", "2", "3"])
{
    return json_decode($str, false);
}

/**
 * Prepare array with list of tabs
 *
 * @param   Exploitation	$object		Object related to tabs
 * @return  array		    Array of tabs to show
 */
function exploitation_prepare_head($object)
{
    global $db, $langs, $conf, $user;

    $label = 'Exploitation';

    $h = 0;
    $head = array();

    $head[$h][0] = DOL_URL_ROOT."/custom/exploitation/card.php?id=".$object->id;
    $head[$h][1] = $label;
    $head[$h][2] = 'card';
    $h++;

    $head[$h][0] = DOL_URL_ROOT."/custom/exploitation/document.php?id=".$object->id;
    $head[$h][1] = 'Documents';
    $head[$h][2] = 'documents';
    $h++;

    $head[$h][0] = DOL_URL_ROOT."/custom/exploitation/agenda.php?id=".$object->id;
    $head[$h][1] = 'Historique';
    $head[$h][2] = 'historique';
    $h++;

    return $head;
}

/**
 *  Retourne le statut de suivi du matériel
 * 
 * @param int $fk_materiel ID du matériel
 * @return array Statut de suivi du matériel [localisation, etat, is_exchange]
 */
function getMaterielSuiviStatus($fk_materiel = '')
{
    global $db;

    //localisation : 1=>entrepot, 2=>exploitant
    //etat_suivi: 1=>à sa place, 2=>en deplacement

    if ($fk_materiel == '') return 0;

    $sql = "SELECT es.fk_materiel, es.fk_localisation, es.fk_etat, es.is_exchange";
    $sql .= " FROM ".MAIN_DB_PREFIX."exploitation_suivi as es ";
    $sql .= " WHERE es.fk_materiel = ".$fk_materiel;
    $sql .= " AND active = 1 ORDER BY date_ajout DESC LIMIT 1";
    $resql = $db->query($sql);
    if ($resql) {
        $obj = $db->fetch_object($resql);
        $fk_localisation = $obj->fk_localisation;
        $fk_etat = $obj->fk_etat;
        $is_exchange = $obj->is_exchange;

        return array('fk_localisation' => $fk_localisation,
                     'etat_suivi' => $fk_etat,
                     'is_exchange' => $is_exchange);
    } 
    else return 0; // SQL query failed
}


/**
 * Affiche le statut de suivi d'un matériel
 * 
 * @param int $fk_materiel ID du matériel
 * @param Exploitation Exploitation du matériel   
 */
function printMaterielSuiviStatus($fk_materiel = '', $exploitation = '')
{
    global $db;

    if ($fk_materiel == '' || $exploitation == '') return 0;

    $status = getMaterielSuiviStatus($fk_materiel);
    $fk_localisation = $status['fk_localisation'];
    $fk_etat = $status['etat_suivi'];

    $is_exchange = $status['is_exchange'];
    $is_entretien = isMaterielInEntretien($fk_materiel);
	$is_replacement = isMaterielReplacement($fk_materiel);

    // Print status picto (entretien, echange...)
    $status_picto_css = 'background-color:dodgerblue;font-size:100%';

    if ($is_entretien || $is_replacement) 
    {
        $entretien_id = ($is_entretien ? $is_entretien : $is_replacement);
        $entretien_link = DOL_URL_ROOT.'/custom/entretien/card.php?id='.$entretien_id;
    }

    // Print status icon if needed
    if ($is_exchange) {
        $title = 'Matériel en cours d\'échange';
        print '<span class="classfortooltip badge badge-status4" title="'.$title.'" style="'.$status_picto_css.'"><i class="fas fa-exchange-alt"></i></span>&nbsp;';
    }
    elseif ($is_entretien) {
        $title = 'Matériel en cours d\'entretien. Cliquez pour être redirigé vers la page l\'entretien correspondant.';
        print '<a href="'.$entretien_link.'" class="classfortooltip badge badge-status4" title="'.$title.'" style="'.$status_picto_css.'"><i class="fas fa-tools"></i></a>&nbsp;';
    }
    elseif ($is_replacement) {
        $title = 'Matériel de remplacement. Cliquez pour être redirigé vers la page l\'entretien correspondant.';
        print '<a href="'.$entretien_link.'" class="classfortooltip badge badge-status4" title="'.$title.'" style="'.$status_picto_css.'"><i class="fas fa-hourglass-half"></i></a>&nbsp;';
    }

    if ($fk_localisation == 1 && $fk_etat == 1) {
        if ($exploitation->etat == 1 && !$is_exchange && !$is_entretien) $badge_code = 8; // exploitation en cours
        else $badge_code = 4;// exploitation terminée / pas commencée
        print '<span class="badge  badge-status'. $badge_code .' badge-status" style="color:white;">À l\'entrepôt</span>';
    } elseif ($fk_localisation == 1 && $fk_etat == 2) {
        print '<span class="badge  badge-status1 badge-status" style="color:white;">En déplacement chez l\'exploitant</span>';
    } elseif ($fk_localisation == 2 && $fk_etat == 1) {
        if ($exploitation->etat == 1 && !$is_exchange && !$is_entretien) {
            $badge_code = 4;
        } // exploitation en cours
        else {
            $badge_code = 8;
        } // exploitation terminée
        print '<span class="badge  badge-status'. $badge_code .' badge-status" style="color:white;">Chez l\'exploitant</span>';
    } elseif ($fk_localisation == 2 && $fk_etat == 2) {
        print '<span class="badge  badge-status1 badge-status" style="color:white;">En déplacement vers l\'entrepôt</span>';
    } else {
        return 0;
    }

}

// Récupere la valeur de la massaction (ex : preshipping) pour un matériel
function getMassactionValue($fk_materiel = '')
{
    global $db, $form;
    //localisation : 1=>entrepot, 2=>exploitant
    //etat_suivi: 1=>a sa place, 2=>en deplacement

    if ($fk_materiel == '') {
        return 0;
    }
    $sql = "SELECT es.fk_materiel, es.fk_localisation, es.fk_etat";
    $sql .= " FROM ".MAIN_DB_PREFIX."exploitation_suivi as es ";
    $sql .= " WHERE es.fk_materiel = ".$fk_materiel;
    $sql .= " AND active = 1 ORDER BY date_ajout DESC LIMIT 1";
    $resql = $db->query($sql);
    if ($resql) {
        $obj = $db->fetch_object($resql);
        $fk_localisation = $obj->fk_localisation;
        $fk_etat = $obj->fk_etat;

        if ($fk_localisation == 1 && $fk_etat == 1) {
            return 'preexpedition';
        } elseif ($fk_localisation == 1 && $fk_etat == 2) {
            return 'preshipping';
        } elseif ($fk_localisation == 2 && $fk_etat == 1) {
            return 'pretoreturn';
        } elseif ($fk_localisation == 2 && $fk_etat == 2) {
            return 'prereturn';
        } else {
            return 0;
        }
    } else {
        return 0;
    }
}


/*
 * Affiche les actions de suivi de livraison des matériels
 * dans la page card du module exploitation
 *
 */
function printMaterielActions($fk_materiel = '', $exploitation = '', $url_param='')
{
    global $db, $form, $formexploitation;
    //localisation : 1=>entrepot, 2=>exploitant
    //etat_suivi: 1=>a sa place, 2=>en deplacement

    if ($fk_materiel == '' || $exploitation == '') return 0;

    $mat = new Materiel($db);
    $mat->fetch($fk_materiel);

    $status = getMaterielSuiviStatus($fk_materiel);
    $fk_localisation = $status['fk_localisation'];
    $fk_etat = $status['etat_suivi'];
	$is_exchange = $status['is_exchange'];
	$is_entretien = isMaterielInEntretien($mat->id);
	$is_replacement = isMaterielReplacement($mat->id);
    $fk_exploitation = $exploitation->id;

    /* Si le materiel n'est pas en cours de retour pour un échange ou en cours d'entretien
     * on active le bouton d'echange et d'entretien */
    if (!$is_exchange && !$is_entretien && !$is_replacement) { 
        // Bouton d'entretien
        print dolGetButtonTitle('Entretien', '', 'fa fas fa-tools paddingleft imgforviewmode', '', 'action-entretien'.$fk_materiel);
		print $form->formconfirm($_SERVER['PHP_SELF'].'?id='. $fk_exploitation .'&mat_id='. $fk_materiel, 'Entretien', 'Êtes-vous sûr de vouloir créer un entretien pour ce matériel ?', "confirm_entretien", '', 0, "action-entretien".$fk_materiel);

        // Bouton d'échange
        print dolGetButtonTitle('Échanger', '', 'fa fas fa-exchange-alt paddingleft imgforviewmode', '', 'action-exchange'.$fk_materiel);
    } else {
        print '<span class="badge badge-status badge-status5" style="color:white;">Actions désactivées</span>';
    }


    $echange_dialog = array(array('label'=> 'Matériel','type'=> 'select', 'name'=>'materiel_echange[]', 'id'=>'materiel_echange'.$fk_materiel, 'values'=>getExchangeList($fk_materiel)));
    print $formexploitation->formconfirm($_SERVER['PHP_SELF'].'?id='. $exploitation->id .'&action=confirm_exchange&mat_id='.$fk_materiel, 'Échange de matériel : '.$mat->ref, 'Choisissez un matériel pour l\'échange', "confirm_exchange", $echange_dialog, 0, 'action-exchange'.$fk_materiel, 'Échanger', 'Annuler');


    print '<span style="border-left:1px solid #000;height:100%; margin:1em;"></span>'; // Trait de séparation

    if ($fk_localisation == 1 && $fk_etat == 1) {
        if ($exploitation->etat == 3) {
            print dolGetButtonTitle('Livrer chez l\'exploitant', 'La livraison chez l\'exploitant n\'est pas possible si l\'exploitation est terminée.', 'fa fa-truck paddingleft imgforviewmode', '', 'action-expedition'.$fk_materiel, -2);
        } elseif ($is_exchange || $is_entretien) {
            print dolGetButtonTitle('Livrer chez l\'exploitant', 'Impossible de livrer le matériel', 'fa fa-truck paddingleft imgforviewmode', '', 'action-expedition'.$fk_materiel, -2);
        } else {
            print dolGetButtonTitle('Livrer chez l\'exploitant', '', 'fa fa-truck paddingleft', '', 'action-expedition'.$fk_materiel);
            print $form->formconfirm($_SERVER['PHP_SELF'].'?id='. $fk_exploitation .'&action=confirm_expedition&mat_id='. $fk_materiel.$url_param, 'Livrer chez l\'exploitant', 'Êtes-vous sûr de vouloir démarrer la livraison de ce materiel ?', "confirm_expedition", '', 0, "action-expedition".$fk_materiel);
        }
    } elseif ($fk_localisation == 1 && $fk_etat == 2) {
        print dolGetButtonTitle('Confirmer livraison chez l\'exploitant', '', 'fa fa-dolly paddingleft', '', 'action-shipping'.$fk_materiel);
        print $form->formconfirm($_SERVER['PHP_SELF'].'?id='. $fk_exploitation .'&action=confirm_shipping&mat_id='. $fk_materiel.$url_param.'#mat'.$fk_materiel, 'Confirmer la livraison', 'Êtes-vous sûr de vouloir confirmer la livraison chez l\'exploitant ?', "confirm_shipping", '', 0, "action-shipping".$fk_materiel);
    } 
    elseif ($fk_localisation == 2 && $fk_etat == 1) 
    {
        // Check if the materiel is in entretien, if so get entretien object
        if ($is_replacement) {
            $entretien_tmp = new Entretien($db);
            $entretien_tmp->fetch($is_replacement); // Is replacement returns the id of the entretien
        }
        
        if ($exploitation->etat == 1 && !$is_exchange && !$is_entretien && !$is_replacement) {
            print dolGetButtonTitle('Retour à l\'entrepôt', 'Le retour des matériels est possible à la fin de l\'exploitation', 'fa fa-truck paddingleft imgforviewmode', '', 'action-toreturn'.$fk_materiel, -2);
        } else {
            if ($entretien_tmp->active) {
                print dolGetButtonTitle('Retour à l\'entrepôt', 'Le matériel de remplacement ne peut pas être retourné à l\'entrepôt avant la fin de l\'entretien', 'fa fa-truck paddingleft imgforviewmode', '', 'action-toreturn'.$fk_materiel, -2);
            } else {
                print dolGetButtonTitle('Retour à l\'entrepôt', '', 'fa fa-truck paddingleft', '', 'action-toreturn'.$fk_materiel);
                print $form->formconfirm($_SERVER['PHP_SELF'].'?id='. $fk_exploitation .'&action=confirm_toreturn&mat_id='. $fk_materiel.$url_param.'#mat'.$fk_materiel, 'Retour à l\'entrepôt', 'Êtes-vous sûr de vouloir démarrer le retour de ce materiel ?', "confirm_toreturn", '', 0, "action-toreturn".$fk_materiel);    
            }
        }
    } elseif ($fk_localisation == 2 && $fk_etat == 2) {
        print dolGetButtonTitle('Confirmer retour', '', 'fa fa-warehouse paddingleft', '', 'action-return'.$fk_materiel);
        print $form->formconfirm($_SERVER['PHP_SELF'].'?id='. $fk_exploitation .'&action=confirm_return&mat_id='. $fk_materiel.$url_param.'#mat'.$fk_materiel, 'Retour à l\'entrepôt', 'Êtes-vous sûr de vouloir confirmer le retour de ce materiel ?', "confirm_return", '', 0, "action-return".$fk_materiel);
    } else {
        return 0;
    }
}

// Retourne une liste des matériels disponible à l'échange selon le matériel à échanger et le kit (ex: on ne propose pas de flûte si on échange un matériel d'un kit guitare electrique)
function getExchangeList($fk_materiel)
{
    global $db;

    $materiel = new Materiel($db);
    $materiel->fetch($fk_materiel);

    $kit = new Kit($db);
    $kit->fetch($materiel->fk_kit);
    $fk_type_kit = $kit->type_kit->id;

    $mat_exclude = array();
    $type_materiel_to_get = array();
    $mat_array = array();

    // On récupère la liste des kits pour savoir quels matériels sont déjà dans un kit
    $sql = "SELECT fk_materiel";
    $sql .= " FROM ".MAIN_DB_PREFIX."kit_content";
    $sql .= " WHERE active = 1";
    $resql = $db->query($sql);
    $num = $db->num_rows($resql);
    $i = 0;
    while ($i < $num) { // Création de la liste de matériels déjà dans un kit
        $obj = $db->fetch_object($resql);
        $mat_fk = $obj->fk_materiel;
        $mat_exclude[] = ' AND m.rowid<>'.$mat_fk;
        $i++;
    }

    // On récupère la liste des types de matériel dont a besoin le kit
    $type_mat_fk = $kit->type_kit->allowed_materiel_type_ids;
    $type_materiel_to_get[] = ' AND (';

    foreach ($type_mat_fk as $key=>$fk) {
        if ($key === array_key_first($type_mat_fk)) {
            $type_materiel_to_get[] = 'm.fk_type_materiel='.$fk;
        } // Si c'est le premier qu'on insère à la requête, on ne met pas de 'OR'
        else {
            $type_materiel_to_get[] = ' OR m.fk_type_materiel='.$fk;
        }
    }
    $type_materiel_to_get[] = ')';

    $sql = "SELECT m.rowid, m.cote, m.modele, t.indicatif, mq.marque";
    $sql .= " FROM ".MAIN_DB_PREFIX."materiel as m";
    $sql.=" INNER JOIN ".MAIN_DB_PREFIX."c_type_materiel as t ON m.fk_type_materiel=t.rowid";
    $sql.=" LEFT JOIN ".MAIN_DB_PREFIX."c_marque as mq ON m.fk_marque=mq.rowid";
    $sql.=" LEFT JOIN ".MAIN_DB_PREFIX."c_exploitabilite as ex ON m.fk_exploitabilite=ex.rowid";
    $sql .= " WHERE m.active = 1";
    $sql .= " AND m.fk_exploitabilite = 1";
    foreach ($mat_exclude as $mat_exclude_) {
        $sql .= $mat_exclude_;
    }
    foreach ($type_materiel_to_get as $type_materiel_to_get_) {
        $sql .= $type_materiel_to_get_;
    }
    $sql .= " ORDER BY t.indicatif DESC";
    $resql = $db->query($sql);
    $num = $db->num_rows($resql);
    $i = 0;
    while ($i < $num) {
        $obj = $db->fetch_object($resql);
        $mat_array[$obj->rowid] = $obj->indicatif . '-' . $obj->cote . ' ' . $obj->marque . ' ' . $obj->modele;
        $i++;
    }

    return $mat_array;
}

function confirmExpedition($id_mat = '', $id_exploitation = '', $user)
{
    global $db, $exploitation;
    if ($id_mat == '' || $id_exploitation == '') return 0;
 
    // Empeche de forcer la livraison si l'exploitation est terminée
    if ($exploitation->etat == 3) return 0;

    $current_state = getMaterielSuiviStatus($id_mat);

    // Empêche d'insérer plusieurs fois la même action
    if ($current_state['fk_localisation'] == 1 && $current_state['etat_suivi'] == 2) return 1;
 
    $mat = new Materiel($db);
    $mat->fetch($id_mat);

    $sql = "UPDATE ".MAIN_DB_PREFIX."exploitation_suivi";
    $sql .= " SET active = 0,";
    $sql .= " date_suppression = '" . date('Y-m-d H:i:s') . "'";
    $sql .= ", fk_user_delete = " . $user->id;
    $sql .= " WHERE fk_materiel = ".$id_mat;
    $sql .= " AND date_suppression IS NULL"; // On rajoute IS NULL sinon ça va update toutes les dates des evenements de ce materiel
    $sql .= " AND fk_exploitation = ".$id_exploitation;
    if (!$db->query($sql)) return 0;
    if (!$db->commit()) return 0;

    $sql = "INSERT INTO ".MAIN_DB_PREFIX."exploitation_suivi (";
    $sql .= "fk_exploitation";
    $sql .= ", fk_materiel";
    $sql .= ", fk_user_author";
    $sql .= ", fk_etat";
    $sql .= ", is_exchange";
    $sql .= ") VALUES ";
    $sql .= '(';
    $sql .= $id_exploitation;
    $sql .= ", ".$id_mat;
    $sql .= ", ".$user->id;
    $sql .= ", 2";
    $sql .= ", " . $current_state['is_exchange'];
    $sql .= ")";
    $result = $db->query($sql);
    
    if (!$result) {
        $error++;
        $error = $db->lasterror();
        return 0;
    }

    return 1;
}


function confirmShipping($id_mat = '', $id_exploitation = '', $user)
{
    global $db;
    if ($id_mat == '' || $id_exploitation == '') {
        return 0;
    }
    $current_state = getMaterielSuiviStatus($id_mat);
    if ($current_state['fk_localisation'] == 2 && $current_state['etat_suivi'] == 1) {
        return 1;
    } // empêche d'insérer plusieur fois la même action
    $mat = new Materiel($db);
    $mat->fetch($id_mat);

    $sql = "UPDATE ".MAIN_DB_PREFIX."exploitation_suivi";
    $sql .= " SET active = 0,";
    $sql .= " date_suppression = '" . date('Y-m-d H:i:s') . "'";
    $sql .= ", fk_user_delete = " . $user->id;
    $sql .= " WHERE fk_materiel = ".$id_mat;
    $sql .= " AND date_suppression IS NULL"; // On rajoute IS NULL sinon ça va update toutes les dates des evenements de ce materiel
    $sql .= " AND fk_exploitation = ".$id_exploitation;
    if (!$db->query($sql)) {
        return -1;
    }
    if (!$db->commit()) {
        return -1;
    }

    $sql = "INSERT INTO ".MAIN_DB_PREFIX."exploitation_suivi (";
    $sql .= "fk_exploitation";
    $sql .= ", fk_materiel";
    $sql .= ", fk_user_author";
    $sql .= ", fk_localisation";
    $sql .= ", is_exchange";
    $sql .= ") VALUES ";
    $sql .= '(';
    $sql .= $id_exploitation;
    $sql .= ", ".$id_mat;
    $sql .= ", ".$user->id;
    $sql .= ", 2";
    $sql .= ", " . $current_state['is_exchange'];
    $sql .= ")";
    $result = $db->query($sql);
    if (!$result) {
        $error++;
        $error = $db->lasterror();
        return 0;
    }

    return 1;
}


function confirmToReturn($id_mat = '', $id_exploitation = '', $user)
{
    global $db, $exploitation;

    // Vérifications ================================================================
    $current_state = getMaterielSuiviStatus($id_mat);
	$is_entretien = isMaterielInEntretien($id_mat);
	$is_replacement = isMaterielReplacement($id_mat);
    if ($exploitation->etat == 1 && !$current_state['is_exchange'] && !$is_entretien && !$is_replacement) {
        return 0;
    } // Empeche de forcer le retour si l'exploitation n'est pas terminée et que le matériel n'est pas en échange
    if ($id_mat == '' || $id_exploitation == '') {
        return 0;
    }
    if ($current_state['fk_localisation'] == 2 && $current_state['etat_suivi'] == 2) {
        return 1;
    } // empêche d'insérer plusieur fois la même action


    // Actions ======================================================================
    $mat = new Materiel($db);
    $mat->fetch($id_mat);
    $sql = "UPDATE ".MAIN_DB_PREFIX."exploitation_suivi";
    $sql .= " SET active = 0,";
    $sql .= " date_suppression = '" . date('Y-m-d H:i:s') . "'";
    $sql .= ", fk_user_delete = " . $user->id;
    $sql .= " WHERE fk_materiel = ".$id_mat;
    $sql .= " AND date_suppression IS NULL"; // On rajoute IS NULL sinon ça va update toutes les dates des evenements de ce materiel
    $sql .= " AND fk_exploitation = ".$id_exploitation;
    if (!$db->query($sql)) {
        return -1;
    }
    if (!$db->commit()) {
        return -1;
    }

    $sql = "INSERT INTO ".MAIN_DB_PREFIX."exploitation_suivi (";
    $sql .= "fk_exploitation";
    $sql .= ", fk_materiel";
    $sql .= ", fk_user_author";
    $sql .= ", fk_localisation";
    $sql .= ", fk_etat";
    $sql .= ", is_exchange";
    $sql .= ") VALUES ";
    $sql .= '(';
    $sql .= $id_exploitation;
    $sql .= ", ".$id_mat;
    $sql .= ", ".$user->id;
    $sql .= ", 2";
    $sql .= ", 2";
    $sql .= ", " . $current_state['is_exchange'];
    $sql .= ")";
    $result = $db->query($sql);
    if (!$result) {
        $error++;
        $error = $db->lasterror();
        return 0;
    }

    return 1;
}


function confirmReturn($id_mat = '', $id_exploitation = '', $user)
{
    global $db;
    if ($id_mat == '' || $id_exploitation == '') return 0;
    
    $current_state = getMaterielSuiviStatus($id_mat);
    $is_replacement = isMaterielReplacement($id_mat);

    // On vérifie si le matériel n'est pas déjà à l'entrepôt
    if ($current_state['fk_localisation'] == 1 && $current_state['etat_suivi'] == 1) return 1;

    $mat = new Materiel($db);
    $mat->fetch($id_mat);
    $kit = new Kit($db);
    $kit->fetch($mat->fk_kit);

    $sql = "UPDATE ".MAIN_DB_PREFIX."exploitation_suivi";
    $sql .= " SET active = 0,";
    $sql .= " date_suppression = '" . date('Y-m-d H:i:s') . "'";
    $sql .= ", fk_user_delete = ".$user->id;
    $sql .= " WHERE fk_materiel = ".$id_mat;
    $sql .= " AND date_suppression IS NULL"; // On rajoute IS NULL sinon ça va update toutes les dates des evenements de ce materiel
    $sql .= " AND fk_exploitation = ".$id_exploitation;
    if (!$db->query($sql)) return 0;
    if (!$db->commit()) return 0;


    // Si le materiel etait en cours d'échange, on insère une ligne de suivi que l'on désactive directement (juste pour garder un historique)
    $sql = "INSERT INTO ".MAIN_DB_PREFIX."exploitation_suivi (";
    $sql .= "fk_exploitation";
    $sql .= ", fk_materiel";
    $sql .= ", fk_user_author";
    $sql .= ", is_exchange";
    $sql .= ", fk_user_delete";
    $sql .= ", date_suppression";
    $sql .= ", active";
    $sql .= ") VALUES ";
    $sql .= '(';
    $sql .= $id_exploitation;
    $sql .= ", ".$id_mat;
    $sql .= ", ".$user->id;
    $sql .= ", ".$current_state['is_exchange'];
    $sql .= ", ".($current_state['is_exchange'] || $is_replacement ? $user->id : "NULL");
    $sql .= ", ".($current_state['is_exchange'] || $is_replacement ? "'".date('Y-m-d H:i:s')."'" : "NULL");
    $sql .= ", ".($current_state['is_exchange'] || $is_replacement ? 0 : 1);
    $sql .= ")";
    $result = $db->query($sql);
    if (!$result) {
        $error++;
        $error = $db->lasterror();
        return 0;
    }

    if ($current_state['is_exchange'] || $is_replacement) {
        // Maintenant, si le materiel etait en retour pour échange ou était un matériel de remplacement, on peut le sortir du kit
        if (($key = array_search($id_mat, $kit->fk_materiel)) !== false) {
            unset($kit->fk_materiel[$key]);
            // Set active to 0 in the database
            $sql = "UPDATE ".MAIN_DB_PREFIX."exploitation_replacement set active = 0 WHERE fk_replacement_materiel = ".$id_mat;
            $db->query($sql);
        }
        $kit->update($user, 1);
    }

    return 1;
}

/*
 * Affiche le menu d'action sur l'exploitation dans la bannière de la page card de l'exploitation
 */
function exploitation_banner_menu($object)
{
    global $form, $exploitation, $formexploitation;
    $menu = '';

    $all_in_warehouse = 1; // Est ce que tous les matériels sont à l'entrepôt
    $is_finished = $exploitation->etat == 3; // Est ce que la date de fin d'exploitation est antérieure ou égale à la date d'aujourd'hui

    foreach ($object->kit_object as $kit) {
        foreach ($kit->materiel_object as $mat) {
            $status = getMaterielSuiviStatus($mat->id);

            if ($status['etat_suivi'] != 1 || $status['fk_localisation'] != 1) {
                $all_in_warehouse = 0;
            }
        }
    }

    $can_cloture = $all_in_warehouse && $is_finished;
    $cloture_btn = '<a accesskey="l" class="button-top-menu-dropdown ';
    $cloture_btn .= ($can_cloture ? '' : 'classfortooltip');
    $cloture_btn .= '" id="button-cloture" style="text-decoration:none !important; '. ($can_cloture ? ' color: green;"' : 'cursor: default; text-decoration:none !important; color: gray;"');
    $cloture_btn .= (!$is_finished ? ' title="L\'exploitation ne peut pas être clôturée avant la date de fin d\'exploitation."' : '');
    $cloture_btn .= ($is_finished && !$all_in_warehouse ? ' title="Tous les matériels doivent être à l\'entrepôt pour clôturer l\'exploitation."' : '');
    $cloture_btn .= '><i class="fa fa-door-closed"></i>&nbsp; Clôturer</a>';

    $cancel_btn = '<a accesskey="l" class="button-top-menu-dropdown ';
    $cancel_btn .= ($all_in_warehouse && !$is_finished ? '' : 'classfortooltip');
    $cancel_btn .= '" id="button-cancel" style="text-decoration:none !important; '. ($all_in_warehouse  && !$is_finished ? 'color: red;"' : 'cursor: default; text-decoration:none !important; color: gray;"');
    if (!$all_in_warehouse) {
        $cancel_btn .= 'title="Les matériels doivent être à l\'entrepôt pour annuler l\'exploitation."';
    } elseif ($is_finished) {
        $cancel_btn .= 'title="Vous ne pouvez pas annuler une exploitation terminée. Utilisez le bouton de clôture de l\'exploitation."';
    }
    $cancel_btn .= '><i class="fa fa-window-close"></i>&nbsp; Annuler</a>';



    $menu .= '<!-- div for bookmark link -->
	<div id="exploitation-parameter-dropdown" class="dropdown inline-block">
			<a class="dropdown-toggle login-dropdown-a" data-toggle="dropdown" href="#" title="Paramètres de l\'exploitation">
					<i class="fa fa-cog" ></i>
			</a>
			<div class="dropdown-menu" style="top: auto; right: 0; left: auto;">
					<div id="dropdown-exploitation-title"><span>Paramètres de l\'exploitation</span></div>
					'. $cloture_btn .'<br>
					<a accesskey="l" class="button-top-menu-dropdown" id="button-add-materiel"style="text-decoration:none !important;"><i class="fas fa-plus-square"></i>&nbsp; Ajouter un matériel</a><br>
					<a accesskey="l" class="button-top-menu-dropdown" id="button-modify-date"style="text-decoration:none !important;"><i class="fa fa-calendar-day"></i>&nbsp; Modifier les dates</a><br>
					'. $cancel_btn .'<br>
			</div>
	</div>';

    $menu .= '
	<!-- Code to show/hide the bookmark drop-down -->
	<script>
	$( document ).ready(function() {
			$(document).on("click", function(event) {
					if (!$(event.target).closest("#exploitation-parameter-dropdown").length) {
		//console.log("close bookmark dropdown - we click outside");
							// Hide the menus.
							$("#exploitation-parameter-dropdown").removeClass("open");
					}
			});
			$("#exploitation-parameter-dropdown .dropdown-toggle").on("click", function(event) {
	console.log("toggle bookmark dropdown");
	openBookMarkDropDown();
			});

			// Key map shortcut
			$(document).keydown(function(e){
						if( e.which === 77 && e.ctrlKey && e.shiftKey ){
							 console.log(\'control + shift + m : trigger open bookmark dropdown\');
							 openBookMarkDropDown();
						}
			});


			var openBookMarkDropDown = function() {
					event.preventDefault();
					$("#exploitation-parameter-dropdown").toggleClass("open");
			}

	});
	</script>';
    if ($can_cloture) {
        $menu .= $form->formconfirm($_SERVER['PHP_SELF'].'?id='. $object->id .'&action=confirm_cloture', 'Clôturer l\'exploitation', 'Êtes-vous sûr de vouloir clôturer l\'exploitation ?', "confirm_cloture", '', 0, "button-cloture");
    }

	// Création de la liste des kits pour la dialog d'ajout de matériel
	$exploitation_kit_array = array();
	foreach($exploitation->kit_object as $kit) {
		$exploitation_kit_array[$kit->id] = $kit->ref;
	}
	$add_materiel_dialog = array(array('label'=> 'Kit','type'=> 'select', 'name'=>'fk_kit_add', 'id'=>'fk_kit_add', 'values'=>$exploitation_kit_array),
								 array('label'=> 'Matériel','type'=> 'select', 'id'=>'fk_materiel_add', 'name'=>'fk_materiel_add'));


	$date_modify_dialog = array(array('label'=> 'Début','type'=> 'date', 'name'=>'date_start', 'value'=>$exploitation->date_debut),
                                                            array('label'=> 'Fin','type'=> 'date', 'name'=>'date_end', 'value'=>$exploitation->date_fin));

    $menu .= $formexploitation->formconfirm($_SERVER['PHP_SELF'].'?id='. $object->id .'&action=confirm_add_materiel', 'Ajouter un matériel', 'Choisissez le kit dans lequel ajouter le matériel <br>', "confirm_add_materiel", $add_materiel_dialog, 0, "button-add-materiel", 'Ajouter', 'Annuler');
    $menu .= $formexploitation->formconfirm($_SERVER['PHP_SELF'].'?id='. $object->id .'&action=confirm_date_modify', 'Modifier les dates d\'exploitation', '', "confirm_date_modify", $date_modify_dialog, 0, "button-modify-date", 'Modifier', 'Annuler');
    $menu .= $formexploitation->formconfirm($_SERVER['PHP_SELF'].'?id='. $object->id .'&action=confirm_cancel', 'Annuler l\'exploitation', 'Êtes-vous sûr de vouloir annuler l\'exploitation ?', "confirm_cancel", '', 0, "button-cancel", 'Oui', 'Non');
	$menu .= "
	<script>
		$(document).on('change','[name=\"fk_kit_add\"]',function(){
	        var selected = $(this).find('option:selected').val();
	           $.ajax({ url: 'http://test-dolibarr.tousalamusique.com/custom/exploitation/ajax/select_materiel_to_add.php?fk_kit='+ selected,
	            context:this,
	                success: function(output) {
	                	$('[name=\"fk_materiel_add\"]').html(output);
	              }
	        });
	    });
	</script>";

    return $menu;
}

/**
 * Affiche les bannières d'alerte des suivi pour une exploitation (ex : "Un materiel doit etre retourné à l'entrepot")
 */
function printSuiviAlert($exploitation)
{
    global $db;

	$in_warehouse = 0;
    $at_exploitant = 0;
    $in_shipping_exploitant = 0;
    $in_shipping_warehouse = 0;

    foreach ($exploitation->kit_object as $kit) {
        foreach ($kit->materiel_object as $mat) {
            $status = getMaterielSuiviStatus($mat->id);
            if ($status['fk_localisation'] == 1 && $status['etat_suivi'] == 1 && !$status['is_exchange']) {
                $in_warehouse++;
            }
            if ($status['fk_localisation'] == 2 && $status['etat_suivi'] == 1 && !$status['is_exchange']) {
                $at_exploitant++;
            }
            if ($status['fk_localisation'] == 1 && $status['etat_suivi'] == 2 && !$status['is_exchange']) {
                $in_shipping_exploitant++;
            }
            if ($status['fk_localisation'] == 2 && $status['etat_suivi'] == 2 && !$status['is_exchange']) {
                $in_shipping_warehouse++;
            }

            if ($status['is_exchange'] && ($status['fk_localisation'] != 1 || $status['etat_suivi'] != 1)) {
                print '<div class="error clearboth"><i class="fas fa-exclamation-triangle"></i>&nbsp; Le matériel '. $mat->ref .' doit être retourné à l\'entrepôt pour finaliser l\'échange</div>';
            }
            if (isMaterielInEntretien($mat->id) && ($status['fk_localisation'] != 1 || $status['etat_suivi'] != 1)) { // Voir entretien.lib.php
                print '<div class="error clearboth"><i class="fas fa-exclamation-triangle"></i>&nbsp; Le matériel '. $mat->ref .' doit être retourné à l\'entrepôt pour effectuer un entretien</div>';
            }
            if (isMaterielReplacement($mat->id) && ($status['fk_localisation'] != 1 || $status['etat_suivi'] != 1)) { // Voir entretien.lib.php
                $entretien_tmp = new Entretien($db);
                $entretien_tmp->fetch(isMaterielReplacement($mat->id)); // isMaterielReplacement returns the id of the entretien
                if (!$entretien_tmp->active){
                    print '<div class="error clearboth"><i class="fas fa-exclamation-triangle"></i>&nbsp; Le matériel '. $mat->ref .' doit être retourné à l\'entrepôt pour finaliser l\'entretien</div>';
                }
            }
        }
    }

    if ($exploitation->etat == 3 && $action == 'confirm_return' && !$at_exploitant && !$in_shipping_exploitant && !$in_shipping_warehouse) {
        //On propose la cloture de l'exploitation si tous les matériels sont rentrés
        print $form->formconfirm($_SERVER['PHP_SELF'].'?id='. $exploitation->id .'&action=confirm_cloture', 'Clôturer l\'exploitation', 'Tous les matériels ont été retournés à l\'entrepôt. Voulez vous procéder à la clôture de l\'exploitation ?', "confirm_cloture", '', 0, 1);
    }


    if ($exploitation->etat == 1) { // Si l'exploitation est en cours

        if ($in_warehouse == 1) {
            print '<div class="error clearboth"><i class="fas fa-exclamation-triangle"></i>&nbsp; Un matériel doit être livré à l\'exploitant !</div>';
        } elseif ($in_warehouse > 1) {
            print '<div class="error clearboth"><i class="fas fa-exclamation-triangle"></i>&nbsp; Des matériels doivent être livrés à l\'exploitant !</div>';
        }
        if ($in_shipping_exploitant == 1) {
            print '<div class="warning clearboth"><i class="fas fa-exclamation-triangle"></i>&nbsp; Un matériel est en attente de confirmation de livraison !</div>';
        } elseif ($in_shipping_exploitant > 1) {
            print '<div class="error clearboth"><i class="fas fa-exclamation-triangle"></i>&nbsp; Des matériels sont en attente de confirmation de livraison !</div>';
        }
    } elseif ($exploitation->etat == 3) {
        if ($at_exploitant + $in_shipping_exploitant == 1) {
            print '<div class="error clearboth"><i class="fas fa-exclamation-triangle"></i>&nbsp; Un matériel doit être retourné à l\'entrepôt !</div>';
        } elseif ($at_exploitant  + $in_shipping_exploitant > 1) {
            print '<div class="error clearboth"><i class="fas fa-exclamation-triangle"></i>&nbsp; Des matériels doivent êtres retournés à l\'entrepôt !</div>';
        }
        if ($in_shipping_warehouse == 1) {
            print '<div class="warning clearboth"><i class="fas fa-exclamation-triangle"></i>&nbsp; Un matériel est en attente de confirmation de retour à l\'entrepôt !</div>';
        } elseif ($in_shipping_warehouse > 1) {
            print '<div class="warning clearboth"><i class="fas fa-exclamation-triangle"></i>&nbsp; Des matériels sont en attente de confirmation de retour à l\'entrepôt !</div>';
        }
        if ($in_shipping_warehouse + $at_exploitant + $in_shipping_exploitant == 0) {
            print '<div class="info clearboth"><i class="fas fa-info-circle"></i>&nbsp; En attente de clôture</div>';
        }
    }

}

/**
 * Vérifie si le matériel correspondant à $id est en exploitation
 * @return int ID de l'exploitation si en exploitation, 0 si non 
 */
function isInExploitation($id)
{
    global $db;
	$sql = "SELECT fk_exploitation FROM ".MAIN_DB_PREFIX."exploitation_suivi";
	$sql .=" WHERE fk_materiel = ".$id;
	$sql .= " AND active = 1";
	$resql = $db->query($sql);
    $num = $db->num_rows($resql);
    if ($num > 0) {
        $obj = $db->fetch_object($resql);
        return $obj->fk_exploitation;
    }
	else return 0;
}