<?php

require_once DOL_DOCUMENT_ROOT.'/core/class/commonobject.class.php';
require_once DOL_DOCUMENT_ROOT.'/custom/materiel/class/materiel.class.php';
require_once DOL_DOCUMENT_ROOT.'/custom/materiel/class/kit.class.php';
require_once DOL_DOCUMENT_ROOT.'/custom/materiel/class/salle.class.php';
require_once DOL_DOCUMENT_ROOT.'/user/class/user.class.php';
require_once DOL_DOCUMENT_ROOT.'/adherents/class/adherent.class.php';
require_once DOL_DOCUMENT_ROOT.'/custom/materiel/core/lib/functions.lib.php';
require_once DOL_DOCUMENT_ROOT.'/custom/materiel/core/lib/kit.lib.php';

/**
 *	Classe de gestion des exploitations
 *
 * Permet la gestion des données d'exploitation et des données de suivi des matériels.
 *
 * @package Exploitation
 */
class Exploitation extends CommonObject
{

    /**
    * Nom d'identification de l'object
    * @var string
    */
    public $element = 'exploitation';

    public $table_element = 'exploitation';

    public $picto = 'exploitation';

    public $error = 'Unknown error';

    public $regeximgext = '\.gif|\.jpg|\.jpeg|\.png|\.bmp|\.webp|\.xpm|\.xbm'; // See also into images.lib.php

    public $id;
    public $ref;
    public $label;
    public $active;

    /**
    * État de l'exploitation (suivi)
    * @var string[]
    */
    public $c_etat = array(1=>array('etat'=>'En cours', 'badge_code'=>'4', 'color'=>''),
                                  2=>array('etat'=>'En attente', 'badge_code'=>'5', 'color'=>''),
                                  3=>array('etat'=>'En attente de clôture', 'badge_code'=>'1', 'color'=>'dodgerblue'),
                                  4=>array('etat'=>'Clôturée', 'badge_code'=>'4', 'color'=>''),
                                  5=>array('etat'=>'Annulée', 'badge_code'=>'8', 'color'=>''));


    public $user_creation;
    public $date_creation;
    public $user_modification;
    public $date_modification;
    public $user_suppression;
    public $date_suppression;

    public $etat;

    public $fk_type_exploitation;
    public $type_exploitation;
    public $type_exploitation_ind;
    public $fk_exploitant;
    public $table_exploitant = array(1=>'adherent', 2=>'user', 3=>'c_salle');

    public $date_debut;
    public $date_fin;
    public $time_left;
    public $duration;

    public $fk_kit = array();
    public $kit_object = array();

    public $materiel_suivi = array();

    public $notes;


    /**
    *  Constructor
    *
    * @param DoliDB $db Database handler
    *
    * @return void
    */
    public function __construct($db)
    {
        $this->db = $db;
        $this->canvas = '';
    }

    /**
    *  Converti un JSON en array
    *
    * @param string $str JSON à décoder
    *
    * @return int[]
    */
    public function strToArray($str)
    {
        return json_decode($str, false);
    }

    /**
    *  Récupération des données de l'exploitation à partir de l'ID
    *
    * @param int $id ID de l'exploitation
    *
    * @return int        0 if KO, 1 if OK
    */
    public function fetch($id = '')
    {
        global $langs, $conf, $fields;

        $this->kit_object = array(); // Reset des kits stockés en cache

        // Check parameters
        if ($id == '') {
            $this->error = 'ErrorWrongParameters';
            dol_syslog(get_class($this)."::fetch ".$this->error);
            return -1;
        }

        $sql = "SELECT e.rowid, e.fk_type_exploitation, e.date_debut, e.date_fin, e.cote, e.notes, e.tms as date_modification, e.date_ajout, e.date_suppression, e.fk_user_author, e.fk_user_modif, e.fk_user_delete, e.fk_exploitant, e.active";
        $sql .= " ,te.indicatif as type_exploitation_ind, te.type as type_exploitation";
        $sql .= " FROM ".MAIN_DB_PREFIX."exploitation as e ";
        $sql.="INNER JOIN ".MAIN_DB_PREFIX."c_type_exploitation as te ON e.fk_type_exploitation=te.rowid ";
        $sql .= " WHERE e.rowid = ".(int) $id;

        $resql = $this->db->query($sql);
        if (!$resql) {
            dol_print_error($this->db);
            return 0;
        } else {
            if ($this->db->num_rows($resql) > 0) {
                $obj = $this->db->fetch_object($resql);

                if ($obj->fk_user_author) {
                    $cuser = new User($this->db);
                    $cuser->fetch($obj->fk_user_author);
                    $this->user_creation = $cuser;
                }

                if ($obj->fk_user_modif) {
                    $muser = new User($this->db);
                    $muser->fetch($obj->fk_user_modif);
                    $this->user_modification = $muser;
                }

                if (!$obj->active) {
                    $duser = new User($this->db);
                    $duser->fetch($obj->fk_user_delete);
                    $this->user_suppression = $duser;
                }
                $this->fk_exploitant = $obj->fk_exploitant;

                $this->date_creation     = $this->db->jdate($obj->date_ajout);
                $this->date_modification = $this->db->jdate($obj->date_modification);
                $this->date_suppression = $this->db->jdate($obj->date_suppression);

                $this->date_debut     = $this->db->jdate($obj->date_debut);
                $this->date_fin = $this->db->jdate($obj->date_fin);
                $this->duration = round(($this->date_fin - $this->date_debut) / (60 * 60 * 24)); // Durée en jour
                $this->time_left = (ceil(($this->date_fin - dol_now()) / (60 * 60 * 24)) > 0 ? ceil(($this->date_fin - dol_now()) / (60 * 60 * 24)) : 0); // Durée en jour

                if ($obj->active && dol_now() > $this->date_fin) {
                    $this->etat = 3;
                } elseif (!$obj->active && $this->db->jdate($obj->date_suppression) < $this->date_fin) {
                    $this->etat = 5;
                } elseif (!$obj->active && $this->db->jdate($obj->date_suppression) > $this->date_fin) {
                    $this->etat = 4;
                } elseif (dol_now() < $this->date_debut) {
                    $this->etat = 2;
                } else {
                    $this->etat = 1;
                }

                $this->id                           = $obj->rowid;
                $this->ref                       = $obj->type_exploitation_ind . '-' . $obj->cote;
                $this->active                       = $obj->active;

                $this->fk_type_exploitation            = $obj->fk_type_exploitation;
                $this->type_exploitation_ind            = $obj->type_exploitation_ind;
                $this->type_exploitation                = $obj->type_exploitation;
                $this->label                = $obj->type_exploitation;

                $this->cote                         = $obj->cote;

                $this->notes                         = $obj->notes;


                $this->db->free($resql);

                $sql = "SELECT ec.fk_kit";
                $sql .= " FROM ".MAIN_DB_PREFIX."exploitation_content as ec ";
                $sql .= " WHERE ec.fk_exploitation = ".$this->id;
                $sql .= " AND active_history = 1";

                $resql = $this->db->query($sql);
                if ($resql) {
                    $num = $this->db->num_rows($resql);
                    $i = 0;
                    while ($i < $num) { // Création de la liste de kit de l'exploitation
                        $obj = $this->db->fetch_object($resql);
                        $kit_fk = $obj->fk_kit;
                        $this->fk_kit[] = $kit_fk;
                        $this->kit_object[$kit_fk] = new Kit($this->db);
                        $this->kit_object[$kit_fk]->fetch($obj->fk_kit);
                        $i++;
                    }
                } else {
                    return 0;
                }

                $sql = "SELECT es.fk_materiel, es.fk_localisation, es.fk_etat";
                $sql .= " FROM ".MAIN_DB_PREFIX."exploitation_suivi as es ";
                $sql .= " WHERE es.fk_exploitation = ".$this->id;
                $sql .= " AND active = 1";

                $resql = $this->db->query($sql);
                if ($resql) {
                    $num = $this->db->num_rows($resql);
                    $i = 0;
                    while ($i < $num) { // Création de la liste de matériels du kit
                        $obj = $this->db->fetch_object($resql);
                        $this->materiel_suivi[$obj->fk_materiel] = $obj;
                        $i++;
                    }
                } else {
                    return 0;
                }

                return 1;
            } else {
                return 0;
            } // Pas d'entrée correspondante pour cet ID
        }
    }


    /**
    *   Création d'une nouvelle exploitation avec injection dans la bdd
    *
    * @param \User $user Utilisateur auteur de l'action
    *
    * @return int        0 if KO, 1 if OK
    */
    public function create($user)
    {
        global $conf, $langs;
        $this->db->begin();
        $error = 0;
        $kit_in_exploitation = array();

        // Vérification des paramètres
        if (empty($this->fk_type_exploitation) || empty($this->fk_kit)) {
            $error++;
            $this->error = 'Invalid parameters';
            return 0;
        }

        if (empty($this->notes)) $this->notes = '';

        /*
        *  Vérification si un kit est inexploitable ou si on insère un kit 2 fois
        */
        if (count(array_unique($this->fk_kit)) < count($this->fk_kit)) { // Si un matériel est présent 2 fois dans l'exploitation
            $this->error = 'Invalid kit list';
            $error++;
            return 0;
        }

        $sql = "SELECT fk_kit";
        $sql .= " FROM ".MAIN_DB_PREFIX."exploitation_content";
        $sql .= " WHERE active = 1";
        $resql = $this->db->query($sql);
        $num = $this->db->num_rows($resql);
        $i = 0;
        while ($i < $num) { // Création de la liste de kit déjà en exploitation
            $obj = $this->db->fetch_object($resql);
            $kit_fk = $obj->fk_kit;
            $kit_in_exploitation[] = $kit_fk;
            $i++;
        }
        // Check if one of the equipment is already in an exploitation
        foreach ($this->fk_kit as $kit_to_include) { 
            if (in_array($kit_to_include, $kit_in_exploitation)) {
                $this->error = 'Equipment unavailable';
                return 0;
            }
        }

        /*
        *  Récuperation cote
        */
        $now = dol_now();

        $sql = "SELECT cote";
        $sql .= " FROM ".MAIN_DB_PREFIX."exploitation";
        $sql .= " WHERE fk_type_exploitation = ".$this -> fk_type_exploitation;
        $sql .= " ORDER BY cote DESC";

        $result = $this->db->query($sql); //On recupère la plus grosse cote des exploitation du même type pour avoir celle de l'exploitation qu'on insère
        $cote_list = $this->db->fetch_object($result);

        if (empty($cote_list)) $this->cote = 1;
        else $this->cote = $cote_list->cote + 1;
        
        $sql = "INSERT INTO ".MAIN_DB_PREFIX."exploitation (";
        $sql .= "fk_type_exploitation";
        $sql .= ", cote";
        $sql .= ", date_debut";
        $sql .= ", date_fin";
        $sql .= ", fk_exploitant";
        $sql .= ", notes";
        $sql .= ", fk_user_author";
        $sql .= ") VALUES (";
        $sql .= $this->fk_type_exploitation;
        $sql .= ", ".$this->cote;
        $sql .= ", '".date('Y-m-d H:i:s', strtotime($this->date_debut))."'";
        $sql .= ", '".date('Y-m-d H:i:s', strtotime($this->date_fin))."'";
        $sql .= ", ".$this->fk_exploitant;
        $sql .= ", '".$this->notes."'";
        $sql .= ", ". $user->id;
        $sql .= ")";

   

        $result = $this->db->query($sql);
        if ($result) {
            $this->id = $this->db->last_insert_id(MAIN_DB_PREFIX."exploitation");
        } else {
            $error++;
            $this->error = $this->db->lasterror();
            return 0;
        }

        /*
        *   On insère dans exploitation_content les kit inclus dans l'exploitation
        */
        $sql = "INSERT INTO ".MAIN_DB_PREFIX."exploitation_content (";
        $sql .= "fk_exploitation";
        $sql .= ", fk_kit";
        $sql .= ", fk_user_author";
        $sql .= ") VALUES ";

        // Insertion d'une nouvelle entrée pour chaque kit
        foreach ($this->fk_kit as $key=>$fk_kit) {
            $sql .= "(";
            $sql .= $this -> id;
            $sql .= ", ".$fk_kit;
            $sql .= ", ".$user->id;
            $sql .= ")";
            if ($key != array_key_last($this->fk_kit)) $sql .= ",";// Pas de virgule pour le dernier kit
            $sql .= " ";
        }
        $result = $this->db->query($sql);
        if (!$result) {
            $error++;
            $this->error = $this->db->lasterror();
            return 0;
        }

        // On insère dans exploitation_suivi les matériels inclus dans l'exploitation
        $sql = "INSERT INTO ".MAIN_DB_PREFIX."exploitation_suivi (";
        $sql .= "fk_exploitation";
        $sql .= ", fk_materiel";
        $sql .= ", fk_user_author";
        $sql .= ") VALUES ";

        // Insertion d'une nouvelle entrée pour chaque materiel
        foreach ($this->fk_kit as $key_kit=>$fk_kit_) {
            $kit = new Kit($this->db);
            $kit->fetch($fk_kit_);
            foreach ($kit->materiel_object as $key_mat=>$mat) {
                $sql .= '(';
                $sql .= $this->id;
                $sql .= ", ".$mat->id;
                $sql .= ", ".$user->id;
                $sql .= ")";
                if ($key_kit != array_key_last($this->fk_kit) || $key_mat != array_key_last($kit->materiel_object)) {
                    $sql .= ",";
                }
                $sql .= " ";
            }
        }
        $result = $this->db->query($sql);
        if (!$result) {
            $error++;
            $this->error = $this->db->lasterror();
            return 0;
        }

        if (!$error) {
            $this->db->commit();
            return $this->id;
        } else {
            $this->db->rollback();
            return 0;
        }
    }

    /**
    * Récupération de la liste des types d'exploitation
    * @return string[] Array contenant les indicatifs et le nom complet des types d'exploitation
    */
    public function getExploitationTypeDict()
    {
        $array_exploitation_type = array();

        global $langs, $conf;

        $sql = "SELECT rowid, indicatif, type";
        $sql .= " FROM ".MAIN_DB_PREFIX."c_type_exploitation";

        $resql = $this->db->query($sql);
        $num = $this->db->num_rows($resql);
        $i = 0;
        while ($i < $num) {
            $obj = $this->db->fetch_object($resql);
            $array_exploitation_type[$obj->rowid]['indicatif'] = $obj->indicatif;
            $array_exploitation_type[$obj->rowid]['type'] = $obj->type;
            $i++;
        }
        return $array_exploitation_type;
    }


    /**
    *  Return if at least one photo is available
    *
    * @param  string $sdir Directory to scan
    * @return boolean                 True if at least one photo is available, False if not
    */
    public function is_photo_available($sdir)
    {
        // phpcs:enable
        include_once DOL_DOCUMENT_ROOT.'/core/lib/files.lib.php';
        include_once DOL_DOCUMENT_ROOT.'/core/lib/images.lib.php';

        global $conf;

        $dir = $sdir;
        if (!empty($conf->global->PRODUCT_USE_OLD_PATH_FOR_PHOTO)) {
            $dir .= '/'.get_exdir($this->id, 2, 0, 0, $this, 'exploitation').$this->id."/photos/";
        } else {
            $dir .= '/'.get_exdir(0, 0, 0, 0, $this, 'exploitation').'/';
        }

        $nbphoto = 0;

        $dir_osencoded = dol_osencode($dir);
        if (file_exists($dir_osencoded)) {
            $handle = opendir($dir_osencoded);
            if (is_resource($handle)) {
                while (($file = readdir($handle)) !== false) {
                    if (!utf8_check($file)) {
                        $file = utf8_encode($file); // To be sure data is stored in UTF8 in memory
                    }
                    if (dol_is_file($dir.$file) && image_format_supported($file) >= 0) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    /**
    * Retourne un lien vers l'exploitation
    *
    * @param bool $notooltip Désactivation de la tooltip
    * @param string $style CSS supplémentaire
    *
    * @return string HTML du lien
    */
    public function getNomUrl($notooltip = 0, $style ='')
    {
        global $conf, $langs;

        $new_notes = $this->notes;
        if (!$new_notes) {
            $new_notes = '<i>Pas de notes</i>';
        }

        $label = '<u>Exploitation</u>';
        $label .= '<br><b>Type d\'exploitation : </b> '.$this->type_exploitation;
        $label .= '<br><b>Notes : </b> '.$new_notes;
        $label .= '<br><br><b>Kits : </b><br>';
        foreach ($this->kit_object as $kit) {
            $label .=  '<span class="badge  badge-status4 badge-status" style="color:white;">'.$kit->getNomURL(1, 'style="color:white;"').'</span>&nbsp '; // Affichage dans la tooltip des liens des kits inclus
        }

        $linkclose = '';

        if (empty($notooltip)) {
            if (!empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER)) {
                $label = $langs->trans("ShowProduct");
                $linkclose .= ' alt="'.dol_escape_htmltag($label, 1).'"';
            }

            $linkclose .= ' title="'.dol_escape_htmltag($label, 1, 1).'"';
            $linkclose .= ' class="nowraponall classfortooltip"';
        }
        $url = DOL_URL_ROOT.'/custom/exploitation/card.php?action=view&id='.$this->id;
        $linkstart = '<a href="'.$url.'" '.$style;
        $linkstart .= $linkclose.'>';
        $linkend = '</a>';

        $result = $linkstart;
        $result .= (talm_img_object(($notooltip ? '' : $label), 'exploitation', ($notooltip ? 'class="paddingright"'.$style : 'class="paddingright classfortooltip"'.$style), 0, 0, $notooltip ? 0 : 1));

        $result .= $this->ref;
        $result .= $linkend;

        return $result;
    }

    /**
    * Affiche l'URL de l'exploitant selon le type d'exploitation
    * @return void
    */
    public function printExploitantInfo()
    {
        switch ($this->fk_type_exploitation) {
            case '1':
                $adherent = new Adherent($this->db);
                $adherent->fetch($this->fk_exploitant);
                print $adherent->getNomUrl(1);
                break;
            case '2':
                $user = new User($this->db);
                $user->fetch($this->fk_exploitant);
                print $user->getNomUrl(1);
                break;
            case '3':
                $salle = new Salle($this->db);
                $salle->fetch($this->fk_exploitant);
                print $salle->getNomUrl();
                break;
        }
    }

    /**
    * Clôture l'exploitation en modifiant le champs "active" dans la base de données
    * @param \User $user Utilisateur auteur de l'action
    * @return bool 0 si KO, 1 si OK
    */
    public function cloture($user)
    {
        global $conf, $langs;
        $error = 0;

        // Vérifications
        $all_in_warehouse = 1; // Est ce que tous les matériels sont à l'entrepôt
        foreach ($this->kit_object as $kit) {
            foreach ($kit->materiel_object as $mat) {
                $status = getMaterielSuiviStatus($mat->id);
                if ($status['etat_suivi'] != 1 || $status['fk_localisation'] != 1) {
                    return 0;
                }
            }
        }
        if ($this->etat != 3) {
            return 0;
        } // Impossible de cloturer l'exploitation si elle n'est pas terminée

        $this->db->begin();
        $sql = "UPDATE ".MAIN_DB_PREFIX."exploitation";
        $sql .= " SET";
        $sql .= " active = 0";
        $sql .= ", fk_user_delete = " . $user->id;
        $sql .= ", date_suppression = '" . date('Y-m-d H:i:s') . "'";
        $sql .= " WHERE rowid = ".$this->id;
        if (!$result = $this->db->query($sql)) {
            return 0;
        }
        if (!$this->db->commit()) {
            return 0;
        }

        $sql = "UPDATE ".MAIN_DB_PREFIX."exploitation_content";
        $sql .= " SET";
        $sql .= " active = 0";
        $sql .= ", fk_user_delete = " . $user->id;
        $sql .= ", date_suppression = '" . date('Y-m-d H:i:s') . "'";
        $sql .= " WHERE fk_exploitation = ".$this->id;
        if (!$result = $this->db->query($sql)) {
            return 0;
        }
        if (!$this->db->commit()) {
            return 0;
        }

        $sql = "UPDATE ".MAIN_DB_PREFIX."exploitation_suivi";
        $sql .= " SET";
        $sql .= " active = 0";
        $sql .= ", fk_user_delete = " . $user->id;
        $sql .= ", date_suppression = '" . date('Y-m-d H:i:s') . "'";
        $sql .= " WHERE fk_exploitation = ".$this->id;
        if (!$result = $this->db->query($sql)) {
            return 0;
        }
        if (!$this->db->commit()) {
            return 0;
        }

        return 1;
    }

    /**
    * Annulation de l'exploitation
    *
    * Possible seulement si l'exploitation n'est pas terminée et que les matériels sont à l'entrepôt.
    * @see Exploitation::cloture()
    *
    * @param \User $user Utilisateur auteur de l'action
    * @return bool 0 si KO, 1 si OK
    */
    public function cancel($user)
    {
        global $conf, $langs;
        $error = 0;

        // Vérifications
        $all_in_warehouse = 1; // Est ce que tous les matériels sont à l'entrepôt
        foreach ($this->kit_object as $kit) {
            foreach ($kit->materiel_object as $mat) {
                $status = getMaterielSuiviStatus($mat->id);
                if ($status['etat_suivi'] != 1 || $status['fk_localisation'] != 1) {
                    return 0;
                }
            }
        }
        if ($this->etat == 4 || $this->etat == 5 || $this->etat == 3) {
            return 0;
        } // Impossible d'annuler l'exploitation si elle est terminée

        $this->db->begin();
        $sql = "UPDATE ".MAIN_DB_PREFIX."exploitation";
        $sql .= " SET";
        $sql .= " active = 0";
        $sql .= ", fk_user_delete = " . $user->id;
        $sql .= ", date_suppression = '" . date('Y-m-d H:i:s') . "'";
        $sql .= " WHERE rowid = ".$this->id;
        if (!$result = $this->db->query($sql)) {
            return 0;
        }
        if (!$this->db->commit()) {
            return 0;
        }

        $sql = "UPDATE ".MAIN_DB_PREFIX."exploitation_content";
        $sql .= " SET";
        $sql .= " active = 0";
        $sql .= ", fk_user_delete = " . $user->id;
        $sql .= ", date_suppression = '" . date('Y-m-d H:i:s') . "'";
        $sql .= " WHERE fk_exploitation = ".$this->id;
        if (!$result = $this->db->query($sql)) {
            return 0;
        }
        if (!$this->db->commit()) {
            return 0;
        }

        $sql = "UPDATE ".MAIN_DB_PREFIX."exploitation_suivi";
        $sql .= " SET";
        $sql .= " active = 0";
        $sql .= ", fk_user_delete = " . $user->id;
        $sql .= ", date_suppression = '" . date('Y-m-d H:i:s') . "'";
        $sql .= " WHERE fk_exploitation = ".$this->id;
        if (!$result = $this->db->query($sql)) {
            return 0;
        }
        if (!$this->db->commit()) {
            return 0;
        }

        return 1;
    }

    /**
    *  Échange $old_materiel avec $new_materiel dans l'exploitation
    *
    * @param int $old_materiel ID du matériel à sortir de l'exploitation
    * @param int $new_materiel ID du matériel à faire entrer
    * @param \User $user
    *
    * @return bool True si OK, False si KO
    */
    public function echange($old_materiel, $new_materiel, $user)
    {
        // Vérifications ==============================================

        // On vérifie si le matériel à ajouter est dans un kit
        $unavailable_materiel = getMaterielInKit();
        if (in_array($new_materiel, $unavailable_materiel)) return 0;

        // On vérifie si $old_materiel était bien dans cette exploitation
        $sql = 'SELECT * FROM '.MAIN_DB_PREFIX.'exploitation_suivi';
        $sql .= ' WHERE';
        $sql .= ' active = 1';
        $sql .= ' AND fk_exploitation = '.$this->id;
        $sql .= ' AND fk_materiel = '.$old_materiel;
        $resql = $this->db->query($sql);
        $num = $this->db->num_rows($resql);
        if (!$num)  return 0;

        // On vérifie que $new_materiel est exploitable
        $new_materiel_object = new Materiel($this->db);
        $new_materiel_object->fetch($new_materiel);
        if ($new_materiel_object->fk_exploitabilite != 1) return 0;

        // Actions ==============================================
        $old_materiel_object = new Materiel($this->db);
        $old_materiel_object->fetch($old_materiel);
        $fk_kit = $old_materiel_object->fk_kit;
        $kit = new Kit($this->db);
        $kit->fetch($fk_kit);
        $kit->fk_materiel[] = $new_materiel;

        // Insertion du nouveau materiel dans le kit
        if (!$kit->update($user, 1)) return 0;


        $sql = "INSERT INTO ".MAIN_DB_PREFIX."exploitation_suivi (";
        $sql .= "fk_exploitation";
        $sql .= ", fk_materiel";
        $sql .= ", fk_user_author";
        $sql .= ") VALUES ";
        $sql .= "(";
        $sql .= $this->id;
        $sql .= ", ".$new_materiel;
        $sql .= ", ".$user->id;
        $sql .= ")";
        $result = $this->db->query($sql);
        if (!$result) return 0;

        // Insertion d'une nouvelle ligne de suivi pour $old_materiel spécifiant l'echange, avec désactivation de l'ancienne ligne de suivi
        $suivi_old_materiel = getMaterielSuiviStatus($old_materiel);

        $sql = "UPDATE ".MAIN_DB_PREFIX."exploitation_suivi";
        $sql .= " SET active = 0,";
        $sql .= " date_suppression = '" . date('Y-m-d H:i:s') . "'";
        $sql .= ", fk_user_delete = ".$user->id;
        $sql .= " WHERE fk_materiel = ".$old_materiel;
        $sql .= " AND date_suppression IS NULL"; // On rajoute IS NULL sinon ça va update toutes les dates des evenements de ce materiel
        $sql .= " AND fk_exploitation = ".$this->id;
        if (!$this->db->query($sql)) {
            return 0;
        }
        if (!$this->db->commit()) {
            return 0;
        }

        $sql = "INSERT INTO ".MAIN_DB_PREFIX."exploitation_suivi (";
        $sql .= "fk_exploitation";
        $sql .= ", fk_materiel";
        $sql .= ", fk_user_author";
        $sql .= ", fk_localisation";
        $sql .= ", fk_etat";
        $sql .= ", is_exchange";
        $sql .= ", fk_user_delete";
        $sql .= ", date_suppression";
        $sql .= ", active";
        $sql .= ") VALUES ";
        $sql .= "(";
        $sql .= $this->id;
        $sql .= ", ".$old_materiel;
        $sql .= ", ".$user->id;
        $sql .= ", ".$suivi_old_materiel['fk_localisation'];
        $sql .= ", ".$suivi_old_materiel['etat_suivi'];
        $sql .= ", 1";
        $sql .= ", ".($suivi_old_materiel['etat_suivi'] == 1 && $suivi_old_materiel['fk_localisation'] == 1 ? $user->id : "NULL");
        $sql .= ", ".  ($suivi_old_materiel['etat_suivi'] == 1 && $suivi_old_materiel['fk_localisation'] == 1 ? "'".date('Y-m-d H:i:s')."'" : "NULL");
        $sql .= ", ".($suivi_old_materiel['etat_suivi'] == 1 && $suivi_old_materiel['fk_localisation'] == 1 ? 0 : 1);
        $sql .= ")";
        $result = $this->db->query($sql);
        if (!$result) {
            return 0;
        }

        // Si $old_materiel était déjà à l'entrepot, on le supprime du kit
        if ($suivi_old_materiel['etat_suivi'] == 1 && $suivi_old_materiel['fk_localisation'] == 1) {
            if (($key = array_search($old_materiel, $kit->fk_materiel)) !== false) {
                unset($kit->fk_materiel[$key]);
            }
            $kit->update($user, 1);
        }
        $this->fetch($this->id); // Met à jour les données de l'exploitation

        return 1;
    }

    /**
    *  Ajoute $fk_materiel dans $fk_kit
    *
    * @param int $fk_materiel ID du matériel à ajouter à l'exploitation
    * @param int $fk_kit ID du kit dans lequel on fait entrer le materiel
    * @param \User $user
    *
    * @return bool True si OK, False si KO
    */
    public function addMateriel($fk_materiel, $fk_kit, $user)
    {
        // Vérifications ==============================================

        // On vérifie si le matériel à ajouter est dans un kit
        $unavailable_materiel = getMaterielInKit();
        if (in_array($fk_materiel, $unavailable_materiel)) return 0;

        // On vérifie que le matériel à ajouter est exploitable
        $materiel_object = new Materiel($this->db);
        $materiel_object->fetch($fk_materiel);
        if ($materiel_object->fk_exploitabilite != 1) return 0;


        // Action ==============================================
        $kit = new Kit($this->db);
        $kit->fetch($fk_kit);
        $kit->fk_materiel[] = $fk_materiel;

        // Insertion du matériel dans le kit
        if (!$kit->update($user, 1)) return 0; 

		// Ajout d'une ligne de suivi pour $fk_materiel (table : exploitation_suivi)
        $sql = "INSERT INTO ".MAIN_DB_PREFIX."exploitation_suivi (";
        $sql .= "fk_exploitation";
        $sql .= ", fk_materiel";
        $sql .= ", fk_user_author";
        $sql .= ") VALUES ";
        $sql .= "(";
        $sql .= $this->id;
        $sql .= ", ".$fk_materiel;
        $sql .= ", ".$user->id;
        $sql .= ")";
        $result = $this->db->query($sql);
        if (!$result) return 0;

        $this->fetch($this->id); // Met à jour les données de l'exploitation

        return 1;
    }



    /**
    * Modifie les dates de début et de fin de l'exploitation
    *
    * @param \DateTime $date_start Nouvelle date de début d'exploitation
    * @param \DateTime $date_end Nouvelle date de fin d'exploitation
    * @param \User $user Utilisateur auteur de l'action
    *
    * @return bool True si OK, False si KO
    */
    public function changeDate($date_start, $date_end, $user)
    {
        global $conf, $langs;
        $error = 0;

        $this->db->begin();
        $sql = "UPDATE ".MAIN_DB_PREFIX."exploitation";
        $sql .= " SET";
        $sql .= " date_debut = '" . date('Y-m-d H:i:s', strtotime($date_start)) . "'";
        $sql .= ", date_fin = '" . date('Y-m-d H:i:s', strtotime($date_end)). "'";
        $sql .= ", fk_user_modif = '" . $user->id . "'";
        $sql .= " WHERE rowid = ".$this->id;
        if (!$result = $this->db->query($sql)) {
            return 0;
        }
        if (!$this->db->commit()) {
            return 0;
        }
        $this->fetch($this->id); // recharge les données de l'exploitation

        return 1;
    }

    /**
    * Récupération de l'historique de suivi des matériels
    *
    * @return mixed[] Array d'entrées de suivi des matériels
    */
    public function getHistoric()
    {
        //On récupère les dates de suivi des matériels
        $history_data = array(); // Liste d'objets de réponse sql

        $sql = "SELECT es.date_ajout, es.fk_materiel, es.fk_localisation, es.fk_etat, es.fk_user_author";
        $sql .= " FROM ".MAIN_DB_PREFIX."exploitation_suivi as es";
        $sql .= " WHERE es.fk_exploitation = ".$this->id;
        $sql .= " ORDER BY es.date_ajout DESC";
        $resql = $this->db->query($sql);
        $history_data = mysqli_fetch_all($resql, MYSQLI_ASSOC);
        return $history_data;
    }


}
