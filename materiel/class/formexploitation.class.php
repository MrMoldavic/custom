<?php

class FormExploitation
{
	/**
     * @var DoliDB Database handler.
     */
    public $db;

	/**
	 * @var string Error code (or message)
	 */
	public $error = '';

	// Cache arrays
	public $cache_type_exploitation = array();
	public $cache_exploitant = array();
	public $cache_materiel = array();


	/**
	 *  Constructor
	 *
	 *  @param  DoliDB  $db     Database handler
	 */
	public function __construct($db)
	{
		$this->db = $db;
	}

	public function strToArray($str) // Converti les listes d'id de la bdd en array (["1", "2", "3"])
	{
	    $str_ = str_replace('[', '', $str);
	    $str_ = str_replace(']', '', $str_);
	    $str_ = str_replace('"', '', $str_);

	    $array = explode(',', $str_);
	    return $array;

	}




	/**
	 *  Form selection type d'exploitation
	 *
	 *
	 */


	/* Charge la liste des types d'exploitation dans le cache */
    public function loadExploitationType($orderBy = 'k.rowid')
	{
		global $conf, $langs;

		if (count($this->cache_type_exploitation)) return 0;

		$sql = "SELECT k.rowid, k.indicatif, k.type";
		$sql .= " FROM ".MAIN_DB_PREFIX."c_type_exploitation as k";
        $sql .= " ORDER BY ".$orderBy;
		$resql = $this->db->query($sql);

		if ($resql)
		{
			$num = $this->db->num_rows($resql);
			$i = 0;
			while ($i < $num)
			{
				$obj = $this->db->fetch_object($resql);
				$this->cache_type_exploitation[$obj->rowid]['id'] = $obj->rowid;
				$this->cache_type_exploitation[$obj->rowid]['indicatif'] = $obj->indicatif;
				$this->cache_type_exploitation[$obj->rowid]['type'] = $obj->type;
				$i++;
			}
			return $num;
		}
		else
		{
			dol_print_error($this->db);
			return -1;
		}

	}
	public function selectTypeExploitation($selected = '', $htmlname = 'idtypeexploitation', $empty = 1, $disabled = 0, $forcecombo = 0, $morecss = 'minwidth200', $orderBy = 'k.indicatif')
	{
		global $conf, $langs, $user, $hookmanager;
		$out = '';
		$this->loadExploitationType();
		$nboftypes = count($this->cache_type_exploitation);

		if ($conf->use_javascript_ajax && !$forcecombo)
		{
			include_once DOL_DOCUMENT_ROOT.'/core/lib/ajax.lib.php';
			$comboenhancement = ajax_combobox($htmlname, $events);
			$out .= $comboenhancement;
		}

		$out .= '<select class="flat'.($morecss ? ' '.$morecss : '').'"'.($disabled ? ' disabled' : '').' id="'.$htmlname.'" name="'.($htmlname.($disabled ? '_disabled' : '')).'">';
		if ($empty) $out .= '<option value="-1">'.($empty_label ? $empty_label : '&nbsp;').'</option>';
		foreach ($this->cache_type_exploitation as $id => $array_types_exploitation)
		{
			$label = '';
			$label .= $array_types_exploitation['type'];
			$out .= '<option value="'.$id.'"';
			if ($selected == $id || ($selected == 'ifone' && $nboftypes == 1)) $out .= ' selected';
			$out .= ' data-html="'.dol_escape_htmltag($label).'"';
			$out .= '>';
			$out .= $label;
			$out .= '</option>';
		}
		$out .= '</select>';
		if ($disabled) $out .= '<input type="hidden" name="'.$htmlname.'" value="'.(($selected > 0) ? $selected : '').'">';

		return $out;

	}
	public function formSelectTypeExploitation($page, $selected = '', $htmlname = 'idtypeexploitation', $addempty = 0)
    {
        global $langs;
        if ($htmlname != "none") {
            print '<form method="POST" action="'.$page.'">';
            print '<input type="hidden" name="action" value="settypeexploitation">';
            print '<input type="hidden" name="token" value="'.newToken().'">';
            print '<table class="nobordernopadding" cellpadding="0" cellspacing="0">';
            print '<tr><td>';
            print $this->selectTypeExploitation($selected, $htmlname, '', $addempty);
            print '</td>';
            print '<td class="left"><input type="submit" class="button" value="'.$langs->trans("Modify").'"></td>';
            print '</tr></table></form>';
        }
    }




	/**
	 *  Form selection exploitant
	 *
	 *
	 */


	/* Charge la liste des types d'exploitation dans le cache */
    public function loadExploitant($table_exploitant, $orderBy = 'rowid')
	{
		global $conf, $langs;

		if (count($this->cache_exploitant)) return 0;

		$fields = array();
		switch ($table_exploitant){
		    case 'adherent':
		        $fields = array('lastname', 'firstname');
		        break;
		    case 'user':
		        $fields = array('lastname', 'firstname');
		        break;
		    case 'c_salle':
		        $fields = array('indicatif_batiment', 'salle');
		        break;

		}

		$sql = "SELECT rowid, " . implode(', ', $fields);
		$sql .= " FROM ".MAIN_DB_PREFIX.$table_exploitant;
        $sql .= " ORDER BY ".$orderBy;
		$resql = $this->db->query($sql);

		if ($resql)
		{
			$num = $this->db->num_rows($resql);
			$i = 0;
			while ($i < $num)
			{
			    $field = '';
				$obj = $this->db->fetch_object($resql);
				switch ($table_exploitant){
        		    case 'adherent':
        		        $field = $obj->firstname .' '.$obj->lastname;
        		        break;
        		    case 'user':
        		        $field = $obj->firstname .' '.$obj->lastname;
        		        break;
        		    case 'c_salle':
        		        $field = $obj->indicatif_batiment .'-'.$obj->salle;
        		        break;
				}
				$this->cache_exploitant[$obj->rowid] = $field;
				$i++;
			}
			return $num;
		}
		else
		{
			dol_print_error($this->db);
			return -1;
		}

	}
	public function selectExploitant($table_exploitant, $selected = '', $htmlname = 'idexploitant', $empty = 0, $disabled = 0, $forcecombo = 0, $morecss = 'minwidth200')
	{
		global $conf, $langs, $user, $hookmanager;
		$out = '';
		$this->loadExploitant($table_exploitant);
		$nbofexp = count($this->cache_exploitant);

		if ($conf->use_javascript_ajax && !$forcecombo)
		{
			include_once DOL_DOCUMENT_ROOT.'/core/lib/ajax.lib.php';
			$comboenhancement = ajax_combobox($htmlname, $events);
			$out .= $comboenhancement;
		}

		$out .= '<select class="flat'.($morecss ? ' '.$morecss : '').'"'.($disabled ? ' disabled' : '').' id="'.$htmlname.'" name="'.($htmlname.($disabled ? '_disabled' : '')).'">';
		$out .= '<option value="-1">'.($empty_label ? $empty_label : '&nbsp;').'</option>';
		foreach ($this->cache_exploitant as $id => $field_exploitant)
		{
			$label = '';
			$label .= $field_exploitant;
			$out .= '<option value="'.$id.'"';
			if ($selected == $id || ($selected == 'ifone' && $nboftypes == 1)) $out .= ' selected';
			$out .= ' data-html="'.dol_escape_htmltag($label).'"';
			$out .= '>';
			$out .= $label;
			$out .= '</option>';
		}
		$out .= '</select>';
		if ($disabled) $out .= '<input type="hidden" name="'.$htmlname.'" value="'.(($selected > 0) ? $selected : '').'">';

		return $out;

	}
	public function formExploitant($table_exploitant, $page, $selected = '', $htmlname = 'idexploitant', $addempty = 0)
    {
        global $langs;
        if ($htmlname != "none") {
            print '<form method="POST" action="'.$page.'">';
            print '<input type="hidden" name="action" value="setexploitant">';
            print '<input type="hidden" name="token" value="'.newToken().'">';
            print '<table class="nobordernopadding" cellpadding="0" cellspacing="0">';
            print '<tr><td>';
            print $this->selectExploitant($selected, $htmlname, '', $addempty);
            print '</td>';
            print '<td class="left"><input type="submit" class="button" value="'.$langs->trans("Modify").'"></td>';
            print '</tr></table></form>';
        }
    }

    public function getEtatContratDict()
    {
        $array_etat = array();

        global $langs, $conf;

        $sql = "SELECT rowid, indicatif, etat";
        $sql .= " FROM ".MAIN_DB_PREFIX."c_etat_contrat";
        $sql .= " WHERE active = 1";

        $resql = $this->db->query($sql);

        $num = $this->db->num_rows($resql);
		$i = 0;
		while ($i < $num)
		{
			$obj = $this->db->fetch_object($resql);
			$array_etat[$obj->rowid] = $obj->etat;
			$i++;
		}
		return $array_etat;
    }


    /*
     *  Copie de la fonction présente dans html.formclass.php mais rajoute la possibilité de modifier le texte des boutons
     */
     public function formconfirm($page, $title, $question, $action, $formquestion = '', $selectedchoice = '', $useajax = 0, $confirmbtntext = '', $cancelbtntext = '', $height = 0, $width = 500, $disableformtag = 0)
   	{
   		global $langs, $conf, $form;

   		$more = '<!-- formconfirm -->';
   		$formconfirm = '';
   		$inputok = array();
   		$inputko = array();

   		// Clean parameters
   		$newselectedchoice = empty($selectedchoice) ? "no" : $selectedchoice;
   		if ($conf->browser->layout == 'phone') $width = '95%';

   		// Set height automatically if not defined
   		if (empty($height)) {
   			$height = 210;
   			if (is_array($formquestion) && count($formquestion) > 1) {
   				$height += ((count($formquestion) - 1) * 28);
   			}
   		}

   		if (is_array($formquestion) && !empty($formquestion))
   		{
   			// First add hidden fields and value
   			foreach ($formquestion as $key => $input)
   			{
   				if (is_array($input) && !empty($input))
   				{
   					if ($input['type'] == 'hidden')
   					{
   						$more .= '<input type="hidden" id="'.(!empty($input['id']) ? $input['id'] : $input['name']).'" name="'.$input['name'].'" value="'.dol_escape_htmltag($input['value']).'">'."\n";
   					}
   				}
   			}

   			// Now add questions
   			$moreonecolumn = '';
   			$more .= '<div class="tagtable paddingtopbottomonly centpercent noborderspacing">'."\n";
   			foreach ($formquestion as $key => $input)
   			{
   				if (is_array($input) && !empty($input))
   				{
   					$size = (!empty($input['size']) ? ' size="'.$input['size'].'"' : '');
   					$moreattr = (!empty($input['moreattr']) ? ' '.$input['moreattr'] : '');
   					$morecss = (!empty($input['morecss']) ? ' '.$input['morecss'] : '');

   					if ($input['type'] == 'text')
   					{
   						$more .= '<div class="tagtr"><div class="tagtd'.(empty($input['tdclass']) ? '' : (' '.$input['tdclass'])).'">'.$input['label'].'</div><div class="tagtd"><input type="text" class="flat'.$morecss.'" id="'.$input['name'].'" name="'.$input['name'].'"'.$size.' value="'.$input['value'].'"'.$moreattr.' /></div></div>'."\n";
   					}
   					elseif ($input['type'] == 'password')
   					{
   						$more .= '<div class="tagtr"><div class="tagtd'.(empty($input['tdclass']) ? '' : (' '.$input['tdclass'])).'">'.$input['label'].'</div><div class="tagtd"><input type="password" class="flat'.$morecss.'" id="'.$input['name'].'" name="'.$input['name'].'"'.$size.' value="'.$input['value'].'"'.$moreattr.' /></div></div>'."\n";
   					}
   					elseif ($input['type'] == 'select')
   					{
   						$more .= '<div class="tagtr"><div class="tagtd'.(empty($input['tdclass']) ? '' : (' '.$input['tdclass'])).'">';
   						if (!empty($input['label'])) $more .= $input['label'].'</div><div class="tagtd left">';
   						$more .= $this->selectarray($input['name'], $input['values'], $input['id'], $input['default'],1, 0, 0, $moreattr, 0, 0, 0, '', $morecss);
   						$more .= '</div></div>'."\n";
   					}
   					elseif ($input['type'] == 'checkbox')
   					{
   						$more .= '<div class="tagtr">';
   						$more .= '<div class="tagtd'.(empty($input['tdclass']) ? '' : (' '.$input['tdclass'])).'">'.$input['label'].' </div><div class="tagtd">';
   						$more .= '<input type="checkbox" class="flat'.$morecss.'" id="'.$input['name'].'" name="'.$input['name'].'"'.$moreattr;
   						if (!is_bool($input['value']) && $input['value'] != 'false' && $input['value'] != '0') $more .= ' checked';
   						if (is_bool($input['value']) && $input['value']) $more .= ' checked';
   						if (isset($input['disabled'])) $more .= ' disabled';
   						$more .= ' /></div>';
   						$more .= '</div>'."\n";
   					}
   					elseif ($input['type'] == 'radio')
   					{
   						$i = 0;
   						foreach ($input['values'] as $selkey => $selval)
   						{
   							$more .= '<div class="tagtr">';
   							if ($i == 0) $more .= '<div class="tagtd'.(empty($input['tdclass']) ? ' tdtop' : (' tdtop '.$input['tdclass'])).'">'.$input['label'].'</div>';
   							else $more .= '<div clas="tagtd'.(empty($input['tdclass']) ? '' : (' "'.$input['tdclass'])).'">&nbsp;</div>';
   							$more .= '<div class="tagtd"><input type="radio" class="flat'.$morecss.'" id="'.$input['name'].'" name="'.$input['name'].'" value="'.$selkey.'"'.$moreattr;
   							if ($input['disabled']) $more .= ' disabled';
   							$more .= ' /> ';
   							$more .= $selval;
   							$more .= '</div></div>'."\n";
   							$i++;
   						}
   					}
   					elseif ($input['type'] == 'date')
   					{
   						$more .= '<div class="tagtr"><div class="tagtd'.(empty($input['tdclass']) ? '' : (' '.$input['tdclass'])).'">'.$input['label'].'</div>';
   						$more .= '<div class="tagtd">';
   						$more .= $form->selectDate($input['value'], $input['name'], 0, 0, 0, '', 1, 0);
   						$more .= '</div></div>'."\n";
   						$formquestion[] = array('name'=>$input['name'].'day');
   						$formquestion[] = array('name'=>$input['name'].'month');
   						$formquestion[] = array('name'=>$input['name'].'year');
   						$formquestion[] = array('name'=>$input['name'].'hour');
   						$formquestion[] = array('name'=>$input['name'].'min');
   					}
   					elseif ($input['type'] == 'other')
   					{
   						$more .= '<div class="tagtr"><div class="tagtd'.(empty($input['tdclass']) ? '' : (' '.$input['tdclass'])).'">';
   						if (!empty($input['label'])) $more .= $input['label'].'</div><div class="tagtd">';
   						$more .= $input['value'];
   						$more .= '</div></div>'."\n";
   					}

   					elseif ($input['type'] == 'onecolumn')
   					{
   						$moreonecolumn .= '<div class="margintoponly">';
   						$moreonecolumn .= $input['value'];
   						$moreonecolumn .= '</div>'."\n";
   					}
   				}
	   			$more .= '</br>'."\n";
   			}
   			$more .= '</div>'."\n";
   			$more .= $moreonecolumn;
   		}

   		// JQUI method dialog is broken with jmobile, we use standard HTML.
   		// Note: When using dol_use_jmobile or no js, you must also check code for button use a GET url with action=xxx and check that you also output the confirm code when action=xxx
   		// See page product/card.php for example
   		if (!empty($conf->dol_use_jmobile)) $useajax = 0;
   		if (empty($conf->use_javascript_ajax)) $useajax = 0;

   		if ($useajax)
   		{
   			$autoOpen = true;
   			$dialogconfirm = 'dialog-confirm';
   			$button = '';
   			if (!is_numeric($useajax))
   			{
   				$button = $useajax;
   				$useajax = 1;
   				$autoOpen = false;
   				$dialogconfirm .= '-'.$button;
   			}
   			$pageyes = $page.(preg_match('/\?/', $page) ? '&' : '?').'action='.$action.'&confirm=yes';
   			$pageno = ($useajax == 2 ? $page.(preg_match('/\?/', $page) ? '&' : '?').'confirm=no' : '');
   			// Add input fields into list of fields to read during submit (inputok and inputko)
   			if (is_array($formquestion))
   			{
   				foreach ($formquestion as $key => $input)
   				{
   					//print "xx ".$key." rr ".is_array($input)."<br>\n";
   					if (is_array($input) && isset($input['name'])) array_push($inputok, $input['id'] ? $input['id'] : $input['name']);
   					if (isset($input['inputko']) && $input['inputko'] == 1) array_push($inputko, $input['id'] ? $input['id'] : $input['name']);
   				}
   			}

   			// Show JQuery confirm box.
   			$formconfirm .= '<div id="'.$dialogconfirm.'" title="'.dol_escape_htmltag($title).'" style="display: none;">';
   			$formconfirm .= ($question ? '<div class="confirmmessage">'.img_help('', '').' '.$question.'</div>' : '');
   			if (is_array($formquestion) && !empty($formquestion['text'])) {
   				$formconfirm .= '<div class="confirmtext">'.$formquestion['text'].'</div>'."\n";
   			}
   			if (!empty($more)) {
   				$formconfirm .= '<div class="confirmquestions">'.$more.'</div>'."\n";
   			}
   			$formconfirm .= '</div>'."\n";

   			$formconfirm .= "\n<!-- begin ajax formconfirm page=".$page." -->\n";
   			$formconfirm .= '<script type="text/javascript">'."\n";
   			$formconfirm .= 'jQuery(document).ready(function() {
               $(function() {
               	$( "#'.$dialogconfirm.'" ).dialog(
               	{
                       autoOpen: '.($autoOpen ? "true" : "false").',';
   			if ($newselectedchoice == 'no')
   			{
   				$formconfirm .= '
   						open: function() {
               				$(form).parent().find("button.ui-button:eq(2)").focus();
   						},';
   			}
   			$formconfirm .= '
                       resizable: false,
                       height: "'.$height.'",
                       width: "'.$width.'",
                       modal: true,
                       closeOnEscape: false,
                       buttons: {
                           "'.($confirmbtntext == '' ? dol_escape_js($langs->transnoentities("Yes")) : $confirmbtntext).'": function() {
                           	var options = "&token='.urlencode(newToken()).'";
                           	var inputok = '.json_encode($inputok).';	/* List of fields into form */
                            	var pageyes = "'.dol_escape_js(!empty($pageyes) ? $pageyes : '').'";
                            	if (inputok.length>0) {
                            		$.each(inputok, function(i, inputname) {
                            			var more = "";
                            			if ($("#" + inputname).attr("type") == "checkbox") { more = ":checked"; }
                            		    if ($("#" + inputname).attr("type") == "radio") { more = ":checked"; }
                            			var inputvalue = $("#" + inputname + more).val();
                            			if (typeof inputvalue == "undefined") { inputvalue=""; }
                            			options += "&" + inputname + "=" + encodeURIComponent(inputvalue);
                            		});
                            	}
                            	var urljump = pageyes + (pageyes.indexOf("?") < 0 ? "?" : "") + options;
                            	//alert(urljump);
               				if (pageyes.length > 0) { location.href = urljump; }
                               $(form).dialog("close");
                           },
                           "'.($cancelbtntext == '' ? dol_escape_js($langs->transnoentities("No")) : $cancelbtntext).'": function() {
                               $( "#'.$dialogconfirm.'" ).dialog("close");
                           }
                       }
                   }
                   );

               	var button = "'.$button.'";
               	if (button.length > 0) {
                   	$( "#" + button ).click(function() {
                   		$("#'.$dialogconfirm.'").dialog("open");
           			});
                   }
               });
               });
               </script>';
   			$formconfirm .= "<!-- end ajax formconfirm -->\n";
   		}
   		else
   		{
   			$formconfirm .= "\n<!-- begin formconfirm page=".$page." -->\n";

   			if (!$disableformtag) $formconfirm .= '<form method="POST" action="'.$page.'" class="notoptoleftroright">'."\n";

   			$formconfirm .= '<input type="hidden" name="action" value="'.$action.'">'."\n";
   			$formconfirm .= '<input type="hidden" name="token" value="'.newToken().'">'."\n";

   			$formconfirm .= '<table class="valid centpercent">'."\n";

   			// Line title
   			$formconfirm .= '<tr class="validtitre"><td class="validtitre" colspan="3">'.img_picto('', 'recent').' '.$title.'</td></tr>'."\n";

   			// Line text
   			if (is_array($formquestion) && !empty($formquestion['text'])) {
   				$formconfirm .= '<tr class="valid"><td class="valid" colspan="3">'.$formquestion['text'].'</td></tr>'."\n";
   			}

   			// Line form fields
   			if ($more)
   			{
   				$formconfirm .= '<tr class="valid"><td class="valid" colspan="3">'."\n";
   				$formconfirm .= $more;
   				$formconfirm .= '</td></tr>'."\n";
   			}

   			// Line with question
   			$formconfirm .= '<tr class="valid">';
   			$formconfirm .= '<td class="valid">'.$question.'</td>';
   			$formconfirm .= '<td class="valid">';
   			$formconfirm .= $form->selectyesno("confirm", $newselectedchoice);
   			$formconfirm .= '</td>';
   			$formconfirm .= '<td class="valid center"><input class="button valignmiddle" type="submit" value="'.$langs->trans("Validate").'"></td>';
   			$formconfirm .= '</tr>'."\n";

   			$formconfirm .= '</table>'."\n";

   			if (!$disableformtag) $formconfirm .= "</form>\n";
   			$formconfirm .= '<br>';

   			$formconfirm .= "<!-- end formconfirm -->\n";
   		}

   		return $formconfirm;
   	}

    // Copie de la function de html.form.class.php avec rajout de la possibilité de spécifier l'id du select
 	public static function selectarray($htmlname, $array, $select_id, $id = '', $show_empty = 0, $key_in_label = 0, $value_as_key = 0, $moreparam = '', $translate = 0, $maxlen = 0, $disabled = 0, $sort = '', $morecss = '', $addjscombo = 0, $moreparamonempty = '', $disablebademail = 0, $nohtmlescape = 0)
 	{
 		global $conf, $langs;

 		// Do we want a multiselect ?
 		//$jsbeautify = 0;
 		//if (preg_match('/^multi/',$htmlname)) $jsbeautify = 1;
 		$jsbeautify = 1;

 		if ($value_as_key) $array = array_combine($array, $array);

 		$out = '';

 		// Add code for jquery to use multiselect
 		if ($addjscombo && $jsbeautify)
 		{
 			$minLengthToAutocomplete = 0;
 			$tmpplugin = empty($conf->global->MAIN_USE_JQUERY_MULTISELECT) ? (constant('REQUIRE_JQUERY_MULTISELECT') ?constant('REQUIRE_JQUERY_MULTISELECT') : 'select2') : $conf->global->MAIN_USE_JQUERY_MULTISELECT;

 			// Enhance with select2
 			include_once DOL_DOCUMENT_ROOT.'/core/lib/ajax.lib.php';
 			$out .= ajax_combobox($htmlname);
 		}

 		$out .= '<select id="'.preg_replace('/^\./', '', $select_id).'" '.($disabled ? 'disabled="disabled" ' : '').'class="flat '.(preg_replace('/^\./', '', $htmlname)).($morecss ? ' '.$morecss : '').'"';
 		$out .= ' name="'.preg_replace('/^\./', '', $htmlname).'" '.($moreparam ? $moreparam : '');
 		$out .= '>';

 		if ($show_empty)
 		{
 			$textforempty = ' ';
 			if (!empty($conf->use_javascript_ajax)) $textforempty = '&nbsp;'; // If we use ajaxcombo, we need &nbsp; here to avoid to have an empty element that is too small.
 			if (!is_numeric($show_empty)) $textforempty = $show_empty;
 			$out .= '<option class="optiongrey" '.($moreparamonempty ? $moreparamonempty.' ' : '').'value="'.($show_empty < 0 ? $show_empty : -1).'"'.($id == $show_empty ? ' selected' : '').'>'.$textforempty.'</option>'."\n";
 		}

 		if (is_array($array))
 		{
 			// Translate
 			if ($translate)
 			{
 				foreach ($array as $key => $value)
 				{
 				    if (!is_array($value)) $array[$key] = $langs->trans($value);
 				    else $array[$key]['label'] = $langs->trans($value['label']);
 				}
 			}

 			// Sort
 			if ($sort == 'ASC') asort($array);
 			elseif ($sort == 'DESC') arsort($array);

 			foreach ($array as $key => $tmpvalue)
 			{
 			    if (is_array($tmpvalue)) $value = $tmpvalue['label'];
 			    else $value = $tmpvalue;

 				$disabled = ''; $style = '';
 				if (!empty($disablebademail))
 				{
 				    if (($disablebademail == 1 && !preg_match('/&lt;.+@.+&gt;/', $value))
 				        || ($disablebademail == 2 && preg_match('/---/', $value)))
 					{
 						$disabled = ' disabled';
 						$style = ' class="warning"';
 					}
 				}

 				if ($key_in_label)
 				{
 					if (empty($nohtmlescape)) $selectOptionValue = dol_escape_htmltag($key.' - '.($maxlen ?dol_trunc($value, $maxlen) : $value));
 					else $selectOptionValue = $key.' - '.($maxlen ?dol_trunc($value, $maxlen) : $value);
 				}
 				else
 				{
 					if (empty($nohtmlescape)) $selectOptionValue = dol_escape_htmltag($maxlen ?dol_trunc($value, $maxlen) : $value);
 					else $selectOptionValue = $maxlen ?dol_trunc($value, $maxlen) : $value;
 					if ($value == '' || $value == '-') $selectOptionValue = '&nbsp;';
 				}

 				$out .= '<option value="'.$key.'"';
 				$out .= $style.$disabled;
 				if (is_array($id)) {
 					if (in_array($key, $id) && !$disabled) $out .= ' selected'; // To preselect a value
 				} else {
 					$id = (string) $id; // if $id = 0, then $id = '0'
 					if ($id != '' && $id == $key && !$disabled) $out .= ' selected'; // To preselect a value
 				}
 				if ($nohtmlescape) $out .= ' data-html="'.dol_escape_htmltag($selectOptionValue).'"';
 				if (is_array($tmpvalue))
 				{
 				    foreach ($tmpvalue as $keyforvalue => $valueforvalue)
 				    {
 				        if (preg_match('/^data-/', $keyforvalue)) $out .= ' '.$keyforvalue.'="'.$valueforvalue.'"';
 				    }
 				}
 				$out .= '>';
 				//var_dump($selectOptionValue);
 				$out .= $selectOptionValue;
 				$out .= "</option>\n";
 			}
 		}

 		$out .= "</select>";
 		return $out;
 	}





}
